#!/usr/bin/env raku

use v6.d;
use App::Librehouse;
use App::Librehouse::Database::Migration;
use App::Librehouse::Database;
use Monad::Result;

{
    use Env::Dotenv :ALL;
    dotenv_load;
}



sub MAIN(*@args) {
    # TODO: Implement migrate up, migrate down, and start.
    die "Don't know what to do with '@args'." if @args.elems > 2;
    given @args[0] {
        when 'start' {
            App::Librehouse::start(%*ENV<LIBREHOUSE_PORT> // 8080);
        }
        when 'migrate' {
            for @migrations -> $migration { 
                say $migration.id;
                if @args[1] eq 'up' {
                    exec-raw-sql("CREATE TABLE IF NOT EXISTS migrations (
                                id VARCHAR UNIQUE PRIMARY KEY,
                                up VARCHAR UNIQUE,
                                down VARCHAR UNIQUE,)");

                    given exec-raw-sql($migration.up) {
                        when Monad::Result::Ok {
                            my @thing = exec-sql("SELECT up FROM migrations WHERE id=?", $migration.id);
                            if @thing.elems == 1 && @thing[0]<up> !eq $migration.up && @thing[0]<down> !eq $migration.down {
                                die "Migrations did not match";
                            }
                            exec-raw-sql("INSERT INTO migrations (id, query) VALUES (?, ?)" |($migration.id, $migration.up));
                            say "Transaction Completed";
                        }
                        when Monad::Result::Error {
                            warn "Transaction Failed";
                        }
                    }
                } elsif @args[1] eq 'down' {
                    given exec-raw-sql($migration) {
                        when Monad::Result::Ok {
                            say "Transaction Completed";
                            exec-raw-sql("DELETE FROM migrations WHERE id=?" |($migration.id));
                        }
                        when Monad::Result::Error {
                            warn "Transaction Failed";
                        }
                    }

                } else {
                    die "Don't know what to do with '@args'.";

                }
            }
            exit 0;
        }


    react whenever signal(SIGINT) { exit 0 }
}
