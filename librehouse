#!/usr/bin/env raku

use v6.d;
use App::Librehouse;
use App::Librehouse::Database::Migration;
use App::Librehouse::Database;
use Monad::Result;

{
    use Env::Dotenv :ALL;
    dotenv_load;
}

sub MAIN(*@args) {
    die "Don't know what to do with '@args'." if @args.elems > 2;
    die "No arguments specified" unless @args.elems;

    exec-raw-sql("CREATE TABLE IF NOT EXISTS migrations (
                        id VARCHAR UNIQUE PRIMARY KEY,
                        up VARCHAR UNIQUE,
                        down VARCHAR UNIQUE)");
    
    given @args[0] {
        when 'start' {
            App::Librehouse::start(%*ENV<LIBREHOUSE_PORT> // 8080);
        }
        when 'migrate' {
            for @migrations -> $migration { 
                my $id = $migration.id;
                if @args[1] eq 'up' {
                    given exec-sql("SELECT * FROM migrations WHERE id = ?", $migration.id) {
                        when Monad::Result::Ok:D {
                            my $row = $_.unwrap[0] // Nil;
                            if $row && ($row<up> !eq $migration.up || $row<down> !eq $migration.down) {
                                die "Migration $id did not match, please fix before continuing.";
                            } elsif !$row {
                                exec-sql("INSERT INTO migrations (id, up, down) VALUES (?, ?, ?)", $migration.id, $migration.up, $migration.down);
                                given exec-raw-sql($migration.up) {
                                    when Monad::Result::Ok:D {
                                        say "$id : Transaction Completed";
                                    }
                                    when Monad::Result::Error:D {
                                        warn "$id : Transaction Failed";
                                    }
                                }
                            } else {
                                say "$id : Already migrated, skipping";
                            }
                        }

                        when Monad::Result::Error:D {
                            warn $_.error;
                        }
                    }
                } elsif @args[1] eq 'down' {
                    given exec-raw-sql($migration.down) {
                        when Monad::Result::Ok:D {
                            say "$id : Transaction Completed";
                            exec-sql("DELETE FROM migrations WHERE id = ?", $migration.id);
                        }
                        when Monad::Result::Error:D {
                            warn "$id : Transaction Failed";
                        }
                    }
                } else {
                    die "Don't know what to do with '@args'.";

                }
            }
            default { exit 0 }
        }
        react whenever signal(SIGINT) { exit 0 }
    }
}
